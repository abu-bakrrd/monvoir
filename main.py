import telebot
from telebot import types
from rembg import remove
from PIL import Image
from io import BytesIO
import logging
from flask import Flask
from threading import Thread
import os


TOKEN = '7560565832:AAFQXWb1QWbyg3kAh056pFTUML3yS9xLbrA'
bot = telebot.TeleBot(TOKEN)

# === Flask –¥–ª—è UptimeRobot ===
app = Flask('')

@app.route('/')
def home():
    return "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"



ALLOWED_USERS = [5644397480, 796365934]
user_images = {}
user_states = {}
global_background = None


@bot.message_handler(commands=['start'])
def start(msg):
    if msg.from_user.id not in ALLOWED_USERS:
        return bot.reply_to(msg, "‚õîÔ∏è –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    bot.send_message(msg.chat.id,
                     "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
                     "–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å –æ–±—ä–µ–∫—Ç–æ–º (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Ä—è–¥), –∏ —è –Ω–∞–ª–æ–∂—É –∏—Ö –Ω–∞ —Ñ–æ–Ω.\n"
                     "–ó–∞–≤–µ—Ä—à–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π /done\n"
                     "–§–æ–Ω —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ /setbg")


@bot.message_handler(commands=['setbg'])
def set_background_start(msg):
    if msg.from_user.id not in ALLOWED_USERS:
        return bot.reply_to(msg, "‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    bot.send_message(msg.chat.id, "üì∏ –û—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ñ–æ–Ω–∞.")
    user_images[msg.chat.id] = {'awaiting_bg': True}


@bot.message_handler(commands=['done'])
def finish_upload(msg):
    chat_id = msg.chat.id

    if chat_id not in user_images or not user_images[chat_id].get('photos'):
        return bot.send_message(chat_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ.")

    bot.send_message(chat_id, "üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É:")
    user_states[chat_id] = {
        'step': 'price',
        'images': user_images[chat_id]['photos']
    }
    user_images.pop(chat_id)


@bot.message_handler(content_types=['photo'])
def handle_photo(msg):
    chat_id = msg.chat.id
    user_id = msg.from_user.id

    if user_id not in ALLOWED_USERS:
        return bot.reply_to(msg, "‚õîÔ∏è –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    file_info = bot.get_file(msg.photo[-1].file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    image = Image.open(BytesIO(downloaded_file)).convert("RGBA")

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–∞
    if chat_id in user_images and user_images[chat_id].get('awaiting_bg'):
        global global_background
        global_background = image
        user_images.pop(chat_id)
        return bot.send_message(chat_id, "‚úÖ –§–æ–Ω —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    if global_background is None:
        return bot.send_message(chat_id, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏ —Ñ–æ–Ω –∫–æ–º–∞–Ω–¥–æ–π /setbg")

    bot.send_message(chat_id, "üõ† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ...")

    # –£–¥–∞–ª—è–µ–º —Ñ–æ–Ω
    buffered = BytesIO()
    image.save(buffered, format="PNG")
    no_bg = remove(buffered.getvalue())
    object_no_bg = Image.open(BytesIO(no_bg)).convert("RGBA")

    # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –Ω–∞ —Ñ–æ–Ω–µ
    bg = global_background.copy()
    bg_w, bg_h = bg.size
    obj_w, obj_h = object_no_bg.size
    scale = min((bg_w * 0.7) / obj_w, (bg_h * 0.7) / obj_h)
    new_size = (int(obj_w * scale), int(obj_h * scale))
    object_resized = object_no_bg.resize(new_size, Image.LANCZOS)
    pos = ((bg_w - new_size[0]) // 2, (bg_h - new_size[1]) // 2)
    bg.paste(object_resized, pos, object_resized)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
    output = BytesIO()
    bg.save(output, format="PNG")
    output.seek(0)

    # –î–æ–±–∞–≤–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
    if chat_id not in user_images:
        user_images[chat_id] = {'photos': []}
    if 'photos' not in user_images[chat_id]:
        user_images[chat_id]['photos'] = []

    user_images[chat_id]['photos'].append(output)
    bot.send_message(chat_id, "üì• –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å —Å–ª–µ–¥—É—é—â–µ–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /done")


@bot.message_handler(content_types=['text'])
def handle_text(msg):
    chat_id = msg.chat.id

    if chat_id not in user_states:
        return

    state = user_states[chat_id]

    if state['step'] == 'price':
        state['price'] = msg.text
        state['step'] = 'category'
        bot.send_message(chat_id, "üè∑ –í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, #–æ–±—É–≤—å):")

    elif state['step'] == 'category':
        state['category'] = msg.text
        state['step'] = 'brand'
        bot.send_message(chat_id, "üßµ –í–≤–µ–¥–∏—Ç–µ –±—Ä–µ–Ω–¥:")

    elif state['step'] == 'brand':
        state['brand'] = msg.text
        state['step'] = 'size'
        bot.send_message(chat_id, "üìè –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, S, M, 40-44):")

    elif state['step'] == 'size':
        state['size'] = msg.text
        state['step'] = 'color'
        bot.send_message(chat_id, "üìè –í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç–∞:")

    elif state['step'] == 'color':
        state['color'] = msg.text
        
        
        caption = (
            f"üñ§ <b>ùó†ùó¢ùó°ùó©ùó¢ùóúùó•</b> | <i>–≠—Å—Ç–µ—Ç–∏–∫–∞ –≤ –∫–∞–∂–¥–æ–π –¥–µ—Ç–∞–ª–∏</i>\n\n"
            f"‚ú® <b>–õ—é–∫—Å–æ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ</b>. –û—Ç–±–æ—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏, –ø—Ä–æ–¥—É–º–∞–Ω–Ω—ã–µ –¥–æ –º–µ–ª–æ—á–µ–π.\n\n"
            f"üí∏ <b>–¶–µ–Ω–∞:</b> <code>{state['price']}</code>\n"
            f"üè∑ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {state['category']}\n"
            f"üëî <b>–ë—Ä–µ–Ω–¥:</b> {state['brand']}\n"
            f"üìè <b>–†–∞–∑–º–µ—Ä—ã:</b> {state['size']}\n"
            f"üé® <b>–¶–≤–µ—Ç:</b> {state.get('color', '‚Äî')}\n\n"
            f"üöö <b>–ö–∞—Ä–≥–æ:</b> <i>7‚Äì11 –¥–Ω–µ–π –ø–æ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω—É</i>\n"
            f"üì¶ <i>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ç–∏—Ä–∞–∂. –£—Å–ø–µ–π –æ—Ñ–æ—Ä–º–∏—Ç—å –¥–æ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∏!</i>"
        )


        media_group = []
        images = state['images']
        for i, img in enumerate(images):
            img.seek(0)
            media = telebot.types.InputMediaPhoto(img, caption=caption if i == 0 else None, parse_mode='HTML')
            media_group.append(media)

        bot.send_media_group(chat_id, media_group)
        user_states.pop(chat_id)
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ
    Thread(target=bot.infinity_polling, daemon=True).start()

    # Flask-—Å–µ—Ä–≤–µ—Ä –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ (Render –µ–≥–æ –±—É–¥–µ—Ç –≤–∏–¥–µ—Ç—å!)
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
